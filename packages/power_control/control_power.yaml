input_number:
  load_shedding_delay:
    name: Load Shedding Delay
    mode: box
    icon: mdi:timelapse
    unit_of_measurement: "min"
    min: 3
    max: 183
    step: 5
  load_restoration:
    name: Load Restoration
    mode: box
    icon: mdi:power-plug
    unit_of_measurement: "W"
    min: 99
    max: 8000
    step: 100
  load_shedding:
    name: Load Shedding
    icon: mdi:power-plug-off
    min: 99
    max: 11000
    step: 100
    unit_of_measurement: "W"
    mode: box
  urgent_shedding:
    name: Urgent Shedding
    icon: mdi:alert
    min: 99
    max: 11000
    step: 100
    unit_of_measurement: "W"
    mode: box

timer:
  load_shedding:
    restore: true
    name: Load Shedding Delay

template:
  - select:
      - name: "Exclude Devices from Load Restoration"
        state: "{{ states('sensor.devices_excluded_from_load_restoration') }}"
        options: >-
          {% from 'power_control.jinja' import dict_device %}
          {{  ['RESET'] + ( dict_device() | from_json ).keys() |list }}
        select_option:
          - event: customizations
            event_data:
              types: power_control
              sensor_select: "{{ option }}"

  - trigger:
      - platform: event
        event_type: customizations
        event_data:
          types: power_control
    sensor:
      - name: Devices Excluded from Load Restoration
        state: "{{ trigger.event.data.sensor_select }}"
        attributes:
          list_exclude: >-
            {% from 'power_control.jinja' import dict_device %}
            {% set my_dict = (dict_device() | from_json)  %}
            {% set lists = this.attributes.list_exclude %}
            {% for device_name, device_info in my_dict.items() if device_name == trigger.event.data.sensor_select %}
              {% if device_info['entity'] in lists %}
                {{ lists | list | select('ne',device_info['entity']) | list }}
              {% else %}
                {% set ns = namespace(entities=lists | list | select('ne', device_info['entity']) | list) %}
                  {{ ns.entities + [device_info['entity']] }}
              {% endif %}
            {% else %}
            {% endfor %}

  - trigger:
      - platform: state
        entity_id: input_boolean.check_shedding
        to: "off"
        for:
          minutes: 1
      - platform: event
        event_type: customizations
        event_data:
          types: notify_power_control
    sensor:
      - name: marquee power control
        state: >-
          {% if trigger.entity_id == 'input_boolean.check_shedding' %}
            {{ 'Last intervention on ' ~ as_local(states['input_boolean.check_shedding'].last_changed).strftime('%d/%m/%Y %H:%M') }}
          {% else %}
            {{ trigger.event.data.message | default('Message not set') }}
          {% endif %}

input_text:
  list_device_power_on:
    initial: "none"
    max: 255

input_boolean:
  check_shedding:
    initial: "off"

automation:
  - alias: Power Control
    id: power_control
    mode: restart
    variables:
      power: >-
        {% from 'power_control.jinja' import power_control %}
        {{ (power_control() | from_json)['Watt Sensor'] }}
    trigger:
      - alias: "Exceeding threshold 2 minutes before shedding"
        platform: template
        value_template: >-
          {% set finishes_at = state_attr('timer.load_shedding', 'finishes_at') %}
          {% if finishes_at %}
              {{ now() > as_datetime(finishes_at) - timedelta(minutes=2) }}
          {% else %}
              False
          {% endif %}
        id: shedding_warning
      - alias: "Reached threshold for shedding starts timer"
        platform: template
        value_template: >-
          {% from 'power_control.jinja' import power_control %}
          {% set power = states[(power_control() | from_json)['Watt Sensor']].state | int(0) %}
            {{ power > states('input_number.load_shedding') | int(0) }}
        id: shedding_threshold
      - alias: "Start URGENT load shedding"
        platform: template
        value_template: >-
          {% from 'power_control.jinja' import power_control %}
          {% set power = states[(power_control() | from_json)['Watt Sensor']].state | int(0) %}
            {{ power > states('input_number.urgent_shedding') | int(0) }}
        id: start_shedding
      - alias: "Start load shedding"
        platform: event
        event_type: timer.finished
        event_data:
          entity_id: timer.load_shedding
        id: start_shedding
      - alias: "Consumption returned to normal, restore loads"
        platform: template
        value_template: >-
          {% from 'power_control.jinja' import power_control %}
          {% set power = states[(power_control() | from_json)['Watt Sensor']].state | int(0) %}
            {{ power < states('input_number.load_restoration') | int(0) }}
        for:
          seconds: "20"
        id: load_restoration
    action:
      - alias: Notify threshold exceeded 2 minutes before 
        if:
          - "{{ trigger.id == 'shedding_warning' and states(power) | int(0) < states('input_number.urgent_shedding') | int(0) }}"
        then:
          - alias: SEND NOTIFICATION
            event: customizations
            event_data:
              types: notify_power_control
              tag: helper1power
              #critical: 1.0
              title: High Consumption
              message: "{{ 'Exceeded ' ~ states(power,  with_unit=true) }}"
      - alias: Reached threshold for shedding starts timer
        if:
          - "{{ trigger.id == 'shedding_threshold' }}"
        then:
          - alias: Set waiting timer
            action: timer.start
            data:
              duration: "00:{{ states('input_number.load_shedding_delay') | int(0) }}:00"
            target:
              entity_id: timer.load_shedding
      - alias: Load shedding
        if:
          - "{{ trigger.id == 'start_shedding' }}"
        then:
          - alias: Cancel timer to avoid another trigger
            action: timer.cancel
            target:
              entity_id: timer.load_shedding
          - alias: Clear text list
            action: input_text.set_value
            data:
              value: none
            target:
              entity_id: "input_text.list_device_power_on"
          - repeat:
              until:
                - >-
                  {% from 'power_control.jinja' import power_control %}
                  {{ states[(power_control() | from_json)['Watt Sensor']].state | int(0) > states('input_number.load_shedding') | int(0) }}
              sequence:
                - alias: Execute loop for load shedding
                  repeat:
                    count: >-
                      {% from 'power_control.jinja' import dict_device %}
                      {% set my_dict = (dict_device() | from_json)  %}         
                      {{ my_dict.values() | selectattr('real_active','eq','on') | list | count + 1 }}
                    sequence:
                      - variables:
                          device_on: >-
                            {% from 'power_control.jinja' import dict_device %}
                            {% set my_dict = (dict_device() | from_json)  %}         
                            {{ my_dict.values() | selectattr('real_active','eq','on') | map(attribute='entity')| list }}
                          power_on: >-
                            {% from 'power_control.jinja' import dict_device %}
                            {% set my_dict = (dict_device() | from_json)  %}         
                            {{ my_dict.values() | selectattr('real_active','eq','on') | map(attribute='power')| list }}
                      - choose:
                          - conditions:
                              - alias: Check if consumption is still high
                                condition: template
                                value_template: >-
                                  {{ states(power) | int(0) > states('input_number.load_shedding') | int(0) }}
                              - alias: Check if there are devices in use
                                condition: template
                                value_template: "{{ device_on | count > 0 }}"
                            sequence:
                              - alias: Activate boolean to know load shedding has been activated
                                action: input_boolean.turn_on
                                target:
                                  entity_id: input_boolean.check_shedding
                              - alias: "Save devices : power"
                                action: input_text.set_value
                                data:
                                  value: >-
                                    "{{ device_on[0] }}" : "{{ power_on[0] }}" {{ (', ' ~ states('input_text.list_device_power_on') if not is_state('input_text.list_device_power_on', 'none') else ' ') }}
                                target:
                                  entity_id: input_text.list_device_power_on
                              - alias: SEND NOTIFICATION
                                event: customizations
                                event_data:
                                  types: notify_power_control
                                  tag: helper1power
                                  message: >-
                                    {% set my_dict = (('{'+ states('input_text.list_device_power_on') + '}') | from_json).keys() | list%}
                                    {% set turned_off = expand(my_dict) | map(attribute='name') |list | join(', ') %}
                                    {{ 'Turning off ' ~ turned_off ~ '. Exceeded ' ~ states(power,  with_unit=true) }}
                              - alias: Turn off the load
                                action: homeassistant.turn_off
                                target:
                                  entity_id: "{{ (device_on)[0] }}"
                              - alias: Delay next shedding check
                                delay:
                                  seconds: 20
                        default:
                          - alias: Check if consumption is still high
                            condition: template
                            value_template: "{{ states(power) | int(0) > states('input_number.load_shedding') | int(0) }}"
                          - alias: SEND NOTIFICATION
                            event: customizations
                            event_data:
                              types: notify_power_control
                              tag: helper2power
                              message: "{{ 'WARNING. Exceeded ' ~ states(power,  with_unit=true) ~ '! No appliances to turn off.' }}"
                          - stop: END SHEDDING DUE TO LACK OF DEVICES
      - alias: Load restoration
        if:
          - "{{ trigger.id == 'load_restoration' }}"
        then:
          - action: timer.cancel
            target:
              entity_id: timer.load_shedding
          - if:
              - alias: Check if load shedding has occurred
                condition: template
                value_template: "{{ is_state('input_boolean.check_shedding', 'on') }}"
            then:
              - variables:
                  device_off: >-
                    {% set device_off = ('{ ' + states('input_text.list_device_power_on') + ' }') | from_json %} 
                    {{ device_off  }}
                  exclude: >-
                    {{ state_attr('sensor.devices_excluded_from_load_restoration', 'list_exclude') }}
              - alias: Load restoration
                repeat:
                  for_each: >-
                    {% if exclude | length > 0  %}
                      {{ device_off.keys() | reject('in', exclude + ['none']) | list }}
                    {% else %}
                      {{ device_off.keys() | list }}
                    {% endif %}
                  sequence:
                    - wait_template: >-
                        {% set device_power = device_off[repeat.index - 1] %}
                        {% if device_power is number %}
                        {{ (device_power | int(0) + states(power) | int(0)) < states('input_number.load_shedding') | int(0) }}
                        {% else %} 
                        true
                        {% endif %}
                      continue_on_timeout: true
                      timeout: "300"
                    - alias: SEND NOTIFICATION
                      event: customizations
                      event_data:
                        types: notify_power_control
                        message: "{{ 'Consumption has returned to normal. ' ~ states[repeat.item].name ~ ' has been turned on.' }}"
                        tag: helper2power
                    - alias: Restore last turned off load not excluded
                      action: homeassistant.turn_on
                      target:
                        entity_id: "{{ repeat.item }}"
                    - alias: Wait to restore appliances
                      delay:
                        seconds: "20"
              - alias: SEND NOTIFICATION
                event: customizations
                event_data:
                  types: notify_power_control
                  message: >-
                        {% if exclude | length > 0  %}
                          {% set my_dict = (('{'+ states('input_text.list_device_power_on') + '}') | from_json).keys() | reject('in', exclude + ['none']) | list %}
                        {% else %}
                          {% set my_dict = (('{'+ states('input_text.list_device_power_on') + '}') | from_json).keys() | reject('in', ['none']) | list %}
                        {% endif %}
                        {% set turned_on = expand(my_dict)  | map(attribute='name') |list | join(', ') %}
                        Consumption has returned to normal{{',' ~ turned_on ~ ' have been restored.' if turned_on | length > 0 }}.
              - alias: Set boolean to off to indicate restoration
                action: input_boolean.turn_off
                target:
                  entity_id: input_boolean.check_shedding